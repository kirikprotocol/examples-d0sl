package org.d0sl.examples.auto;

/*Generated by MPS */

import org.d0sl.base.SemanticLibrary;
import org.d0sl.examples.auto.drome.AIAutodrome;
import org.d0sl.machine.SemanticMachine;
import org.d0sl.base.BaseFunction;
import org.d0sl.examples.auto.drome.RoboCar;

@SemanticLibrary(name = "Autodrome")
public class AutodromeDSL {
  private AIAutodrome autodrome;
  /**
   * If there is a constructor in the semantic library class
   * with a single parameter SemanticMachine, then it will be invoked
   * when loading this library.
   * @param semantic semantic machine
   */
  public AutodromeDSL(SemanticMachine semantic) {
    autodrome = new AIAutodrome(semantic);
  }
  @BaseFunction(name = "road sign allows move")
  public boolean isRoadSignAllowsMove(RoboCar car) {
    return autodrome.isRoadSignAllowsMove(car);
  }
  @BaseFunction(name = "road sign allows turn left")
  public boolean isRoadSignAllowsTurnLeft(RoboCar car) {
    return autodrome.isRoadSignAllowsTurnLeft(car);
  }
  @BaseFunction(name = "road sign allows turn right")
  public boolean isRoadSignAllowsTurnRight(RoboCar car) {
    return autodrome.isRoadSignAllowsTurnRight(car);
  }
  @BaseFunction(name = "wall ahead")
  public boolean isWallAhead(RoboCar car) {
    return autodrome.isWallAhead(car);
  }
  @BaseFunction(name = "road sign")
  public boolean isRoadSign(RoboCar car) {
    return autodrome.isRoadSign(car);
  }
  @BaseFunction(name = "car ahead")
  public boolean isCarAhead(RoboCar car) {
    return autodrome.isCarAhead(car);
  }
  @BaseFunction(name = "head to head")
  public boolean isCarHeadToHead(RoboCar car) {
    return autodrome.isCarHeadToHead(car);
  }
  @BaseFunction(name = "wall left")
  public boolean isWallLeft(RoboCar car) {
    return autodrome.isWallLeft(car);
  }
  @BaseFunction(name = "wall right")
  public boolean isWallRight(RoboCar car) {
    return autodrome.isWallRight(car);
  }
  @BaseFunction(name = "interference right")
  public boolean isInterferenceRight(RoboCar car) {
    return autodrome.isInterferenceRight(car);
  }
  @BaseFunction(name = "interference left")
  public boolean isInterferenceLeft(RoboCar car) {
    return autodrome.isInterferenceLeft(car);
  }
  @BaseFunction(name = "interference ahead")
  public boolean isInterferenceAhead(RoboCar car) {
    return autodrome.isInterferenceAhead(car);
  }
  @BaseFunction(name = "add wall")
  public boolean addWall(double row, double col) {
    return autodrome.addWall(row, col);
  }
  @BaseFunction(name = "add road sign")
  public boolean addRoadSign(double row, double col, String direction) {
    return autodrome.addRoadSign(row, col, direction);
  }
  @BaseFunction(name = "start")
  public boolean start(double carNumber, double pause) {
    return autodrome.start(carNumber, pause);
  }
}
