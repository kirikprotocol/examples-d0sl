package org.d0sl.examples.chess;

/*Generated by MPS */

import org.d0sl.base.SemanticLibrary;
import org.d0sl.machine.SemanticMachine;
import org.d0sl.base.BaseFunction;
import org.d0sl.model.expression.List;
import java.util.ArrayList;
import org.d0sl.examples.chess.pieces.Piece;
import org.d0sl.examples.chess.chessboard.Position;

/**
 * Represents a DSL for task: Arrangement of chess queens
 */
@SemanticLibrary(name = "ChessDSL")
public class ChessDSL {
  private ChessRobot robot;
  public ChessDSL(SemanticMachine semantic) {
    this.robot = new ChessRobot(semantic);
  }
  /**
   * Runs GUI for chess auto
   * @return
   */
  @BaseFunction(name = "start")
  public boolean start() {
    return robot.show();
  }
  /**
   * Returns a list of queens arranged on the chess board
   * @param board
   * @return
   */
  @BaseFunction(name = "get queens")
  public List getQueens(ChessBoard board) {
    List res = new List();
    ArrayList<Piece> pieces = board.getBoard().getPieceList();
    for (Piece piece : pieces) {
      Position pos = piece.getPosition();
      res.getValue().add(new ChessQueen(pos.getRow(), pos.getColumn()));
    }
    return res;
  }
  /**
   * Check if two queens are in the same horizontal or vertical
   * @param
   * @return
   */
  @BaseFunction(name = "on one line")
  public boolean onOneLine(ChessQueen q1, ChessQueen q2) {
    if (q1.getCol() == q2.getCol() || q1.getRaw() == q2.getRaw()) {
      return true;
    }
    return false;
  }
  /**
   * Check if two queens are near
   * @param
   * @return
   */
  @BaseFunction(name = "on near line")
  public boolean onNearLine(ChessQueen q1, ChessQueen q2) {
    if (q1.equals(q2)) {
      return true;
    }
    if (Math.abs(q1.getCol() - q2.getCol()) == 1) {
      return true;
    }
    return false;
  }
  /**
   * Check if two queens are on knight move
   * @param
   * @return
   */
  @BaseFunction(name = "on knight move")
  public boolean onKnightMove(ChessQueen q1, ChessQueen q2) {
    if (q1.equals(q2)) {
      return true;
    }
    if (Math.abs(q1.getCol() - q2.getCol()) == 1 && Math.abs(q1.getRaw() - q2.getRaw()) == 2) {
      return true;
    }
    if (Math.abs(q1.getRaw() - q2.getRaw()) == 1 && Math.abs(q1.getCol() - q2.getCol()) == 2) {
      return true;
    }
    return false;
  }
  /**
   * Check if two queens are in the same diagonal
   * @param
   * @return
   */
  @BaseFunction(name = "on one diagonal")
  public boolean onOneDiagonal(ChessQueen q1, ChessQueen q2) {
    if (Math.abs(q1.getCol() - q2.getCol()) == Math.abs(q1.getRaw() - q2.getRaw())) {
      return true;
    }
    return false;
  }
}
