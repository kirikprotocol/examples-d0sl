package org.d0sl.examples.chess.view;

/*Generated by MPS */

import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import org.d0sl.examples.chess.pieces.Piece;
import org.d0sl.examples.chess.chessboard.Position;

/**
 * 
 */
public class ChessboardPanel extends JPanel {
  public static final Color CHESSWHITE = Color.WHITE;
  public static final Color CHESSBLACK = Color.GRAY;
  private ChessSquare[][] squares;
  public ChessboardPanel() {
    int prefSize = 8 * ChessSquare.SQUARE_SIZE;
    setPreferredSize(new Dimension(prefSize, prefSize));
    squares = new ChessSquare[8][8];
    createAndAddSquares();
  }
  @Override
  protected void paintComponent(Graphics g) {
    draw(g);
  }
  private void draw(Graphics g) {
    for (int x = 0; x < 8; x++) {
      for (int y = 0; y < 8; y++) {
        squares[x][y].draw(g);
      }
    }
  }
  public void refreshUI() {
    paintComponent(this.getGraphics());
  }
  private void createAndAddSquares() {
    Color color = CHESSBLACK;
    for (int x = 0; x < 8; x++) {
      for (int y = 0; y < 8; y++) {
        int xPos = x * ChessSquare.SQUARE_SIZE;
        int yPos = y * ChessSquare.SQUARE_SIZE;
        ChessSquare square = new ChessSquare(color, xPos, yPos);
        squares[x][y] = square;
        color = switchBlackWhite(color);
      }
      color = switchBlackWhite(color);
    }
  }
  private Color switchBlackWhite(Color color) {
    if (color == CHESSBLACK) {
      return CHESSWHITE;
    } else {
      return CHESSBLACK;
    }
  }
  public void setPiece(Piece piece, Position pos) {
    squares[pos.getRow()][pos.getColumn()].setPieceImage(piece.getImage());
  }
  public void clear(Position pos) {
    squares[pos.getRow()][pos.getColumn()].setPieceImage(null);
  }
}
