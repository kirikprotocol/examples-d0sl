package org.d0sl.examples.sandbox;

/*Generated by MPS */

import org.d0sl.model.SemanticModel;
import org.d0sl.model.PredicateDef;
import org.d0sl.model.expression.Or;
import org.d0sl.model.FunctionCall;
import org.d0sl.model.ArgumentRef;
import org.d0sl.model.ArgumentDef;
import org.d0sl.model.expression.LogicalConstant;
import org.d0sl.model.expression.Logical;
import org.d0sl.model.expression.Not;
import org.d0sl.model.PredicateCall;
import org.d0sl.model.expression.And;
import org.d0sl.model.expression.Implication;
import org.d0sl.model.expression.NumericConstant;
import org.d0sl.model.expression.StringConstant;
import org.d0sl.machine.LocalSemanticRegistry;
import org.d0sl.machine.ModelDescriptor;
import org.d0sl.machine.LocalSemanticMachine;
import org.d0sl.machine.PredicateDescriptor;
import org.d0sl.machine.SemanticException;

public class AutodromeAII {
  private static String name;
  private static SemanticModel model;

  static {
    name = "AutodromeAII";
    model = new SemanticModel(name);
  }

  public static String getName() {
    return name;
  }
  public static SemanticModel getModel() {
    return model;
  }


  /**
   * Adds all global variables to Semantic Model
   */
  public static void addVariables(SemanticModel model) {
  }


  /**
   * Adds all rules to Semantic Model
   */
  public static void addRules(SemanticModel model) {
  }


  /**
   * Adds all predicates definitions to Semantic Model
   */
  public static void addPredicates(SemanticModel model) {
    model.addPredicateDef(predicate_c0());
    model.addPredicateDef(predicate_e0());
    model.addPredicateDef(predicate_g0());
    model.addPredicateDef(predicate_i0());
    model.addPredicateDef(predicate_k0());
    model.addPredicateDef(predicate_m0());
    model.addPredicateDef(predicate_p0());
    model.addPredicateDef(predicate_r0());
    model.addPredicateDef(predicate_t0());
    model.addPredicateDef(predicate_w0());
    model.addPredicateDef(predicate_z0());
    model.addPredicateDef(predicate_bb0());
    model.addPredicateDef(predicate_db0());
    model.addPredicateDef(predicate_fb0());
  }

  public static PredicateDef predicate_c0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "obstacle ahead", new Or() {
      {
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall ahead");
            addOperand(new ArgumentRef("AutodromeAII", "obstacle ahead", "car"));
          }
        });
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("car ahead");
            addOperand(new ArgumentRef("AutodromeAII", "obstacle ahead", "car"));
          }
        });

      }
    }, new ArgumentDef("AutodromeAII", "obstacle ahead", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_e0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can move1", new LogicalConstant() {
      {
        setValue(Logical.TRUE);
      }
    }, new ArgumentDef("AutodromeAII", "can move1", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_g0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can move2", new Not(new PredicateCall() {
      {
        setModelName("AutodromeAII");
        setPredicateName("obstacle ahead");
        addOperand(new ArgumentRef("AutodromeAII", "can move2", "car"));
      }
    }), new ArgumentDef("AutodromeAII", "can move2", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_i0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can move3", new And() {
      {
        addOperand(new Not(new PredicateCall() {
          {
            setModelName("AutodromeAII");
            setPredicateName("obstacle ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can move3", "car"));
          }
        }));
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("interference right");
            addOperand(new ArgumentRef("AutodromeAII", "can move3", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can move3", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_k0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can move", new And() {
      {
        addOperand(new Not(new PredicateCall() {
          {
            setModelName("AutodromeAII");
            setPredicateName("obstacle ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can move", "car"));
          }
        }));
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("interference right");
            addOperand(new ArgumentRef("AutodromeAII", "can move", "car"));
          }
        }));
        addOperand(new Implication(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("road sign");
            addOperand(new ArgumentRef("AutodromeAII", "can move", "car"));
          }
        }, new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("road sign allows move");
            addOperand(new ArgumentRef("AutodromeAII", "can move", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can move", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_m0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can turn right1", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall right");
            addOperand(new ArgumentRef("AutodromeAII", "can turn right1", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can turn right1", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_p0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can turn right", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall right");
            addOperand(new ArgumentRef("AutodromeAII", "can turn right", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can turn right", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_r0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can turn left1", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall left");
            addOperand(new ArgumentRef("AutodromeAII", "can turn left1", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can turn left1", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_t0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can turn left", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall left");
            addOperand(new ArgumentRef("AutodromeAII", "can turn left", "car"));
          }
        }));
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("road sign allows turn left");
            addOperand(new ArgumentRef("AutodromeAII", "can turn left", "car"));
          }
        });
      }
    }, new ArgumentDef("AutodromeAII", "can turn left", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_w0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can stop0", new LogicalConstant() {
      {
        setValue(Logical.TRUE);
      }
    }, new ArgumentDef("AutodromeAII", "can stop0", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_z0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can stop", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can stop", "car"));
          }
        }));
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("road sign");
            addOperand(new ArgumentRef("AutodromeAII", "can stop", "car"));
          }
        }));
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("car ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can stop", "car"));
          }
        });
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("head to head");
            addOperand(new ArgumentRef("AutodromeAII", "can stop", "car"));
          }
        }));
      }
    }, new ArgumentDef("AutodromeAII", "can stop", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_bb0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can stop2", new And() {
      {
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("wall ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can stop2", "car"));
          }
        }));
        addOperand(new Not(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("road sign");
            addOperand(new ArgumentRef("AutodromeAII", "can stop2", "car"));
          }
        }));
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("car ahead");
            addOperand(new ArgumentRef("AutodromeAII", "can stop2", "car"));
          }
        });
      }
    }, new ArgumentDef("AutodromeAII", "can stop2", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_db0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "can stop3", new LogicalConstant() {
      {
        setValue(Logical.FALSE);
      }
    }, new ArgumentDef("AutodromeAII", "can stop3", "car") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_fb0() {
    PredicateDef res = new PredicateDef("AutodromeAII", "start", new And() {
      {
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add wall");
            addOperand(new NumericConstant(new Double("5")));
            addOperand(new NumericConstant(new Double("1")));
          }
        });
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add wall");
            addOperand(new NumericConstant(new Double("5")));
            addOperand(new NumericConstant(new Double("14")));
          }
        });
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add wall");
            addOperand(new NumericConstant(new Double("10")));
            addOperand(new NumericConstant(new Double("8")));
          }
        });
        addOperand(null);
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add road sign");
            addOperand(new NumericConstant(new Double("4")));
            addOperand(new NumericConstant(new Double("5")));
            addOperand(new StringConstant("south"));
          }
        });
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add road sign");
            addOperand(new NumericConstant(new Double("6")));
            addOperand(new NumericConstant(new Double("9")));
            addOperand(new StringConstant("north"));
          }
        });
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("add road sign");
            addOperand(new NumericConstant(new Double("7")));
            addOperand(new NumericConstant(new Double("7")));
            addOperand(new StringConstant("east"));
          }
        });
        addOperand(null);
        addOperand(new FunctionCall() {
          {
            setModelName("Autodrome");
            setFunctionName("start");
            addOperand(new NumericConstant(new Double("12")));
            addOperand(new NumericConstant(new Double("250")));
          }
        });
      }
    }) {
      {
      }
    };
    return res;
  }

  public static void main(String[] args) {

    // Building SemanticModel 
    addVariables(model);
    addRules(model);
    addPredicates(model);
    System.out.println(model);

    // Runing start() predicate if it exists 
    LocalSemanticRegistry registry = new LocalSemanticRegistry();
    try {
      ModelDescriptor md = registry.register(model);
      LocalSemanticMachine machine = (LocalSemanticMachine) registry.getSemanticMachine(md);

      machine.loadBaseLibrary("org.d0sl.examples.auto.AutodromeDSL");

      PredicateDescriptor[] predicates = machine.getPredicatesList();
      PredicateDescriptor start = null;
      for (PredicateDescriptor pdesc : predicates) {
        System.out.println(pdesc);
        if (pdesc.getPredicateName().equals("start")) {
          start = pdesc;
        }
      }
      if (start != null) {
        System.out.println(machine.callPredicate("start"));
      }
    } catch (SemanticException ex) {
      ex.printStackTrace();
    }


  }

}
