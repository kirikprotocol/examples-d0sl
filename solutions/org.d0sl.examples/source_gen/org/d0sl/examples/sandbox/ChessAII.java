package org.d0sl.examples.sandbox;

/*Generated by MPS */

import org.d0sl.model.SemanticModel;
import org.d0sl.model.PredicateDef;
import org.d0sl.model.expression.And;
import org.d0sl.model.FunctionCall;
import org.d0sl.model.expression.LogicalConstant;
import org.d0sl.model.expression.Logical;
import org.d0sl.model.ArgumentDef;
import org.d0sl.model.expression.ForAll;
import org.d0sl.model.VariableRef;
import org.d0sl.model.expression.Not;
import org.d0sl.model.expression.RangeRef;
import org.d0sl.model.expression.Range;
import org.d0sl.model.VariableDef;
import org.d0sl.model.ArgumentRef;
import org.d0sl.machine.LocalSemanticRegistry;
import org.d0sl.machine.ModelDescriptor;
import org.d0sl.machine.LocalSemanticMachine;
import org.d0sl.machine.PredicateDescriptor;
import org.d0sl.machine.SemanticException;

public class ChessAII {
  private static String name;
  private static SemanticModel model;

  static {
    name = "ChessAII";
    model = new SemanticModel(name);
  }

  public static String getName() {
    return name;
  }
  public static SemanticModel getModel() {
    return model;
  }


  /**
   * Adds all global variables to Semantic Model
   */
  public static void addVariables(SemanticModel model) {
  }


  /**
   * Adds all rules to Semantic Model
   */
  public static void addRules(SemanticModel model) {
  }


  /**
   * Adds all predicates definitions to Semantic Model
   */
  public static void addPredicates(SemanticModel model) {
    model.addPredicateDef(predicate_c0_0());
    model.addPredicateDef(predicate_e0_0());
    model.addPredicateDef(predicate_h0());
    model.addPredicateDef(predicate_j0());
    model.addPredicateDef(predicate_m0_0());
    model.addPredicateDef(predicate_o0());
  }

  public static PredicateDef predicate_c0_0() {
    PredicateDef res = new PredicateDef("ChessAII", "start", new And() {
      {
        addOperand(new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("start");
          }
        });
      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_e0_0() {
    PredicateDef res = new PredicateDef("ChessAII", "check board0", new LogicalConstant() {
      {
        setValue(Logical.TRUE);
      }
    }, new ArgumentDef("ChessAII", "check board0", "board") {
      {

      }
    }) {
      {
      }
    };
    return res;
  }
  public static PredicateDef predicate_h0() {
    PredicateDef res = new PredicateDef("ChessAII", "check board1", new And() {
      {
        addOperand(new ForAll(new VariableRef("queens", "ChessAII"), new Not(new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("on one line");
            addOperand(new RangeRef("q1"));
            addOperand(new RangeRef("q2"));
          }
        })) {
          {
            add(new Range("q1"));
            add(new Range("q2"));
          }
        });
      }
    }, new ArgumentDef("ChessAII", "check board1", "board") {
      {

      }
    }) {
      {
        addLocalVariable(new VariableDef("queens", new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("get queens");
            addOperand(new ArgumentRef("ChessAII", "check board1", "board"));
          }
        }));
      }
    };
    return res;
  }
  public static PredicateDef predicate_j0() {
    PredicateDef res = new PredicateDef("ChessAII", "check board2", new And() {
      {
        addOperand(new ForAll(new VariableRef("queens", "ChessAII"), new Not(new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("on one diagonal");
            addOperand(new RangeRef("q1"));
            addOperand(new RangeRef("q2"));
          }
        })) {
          {
            add(new Range("q1"));
            add(new Range("q2"));
          }
        });
      }
    }, new ArgumentDef("ChessAII", "check board2", "board") {
      {

      }
    }) {
      {
        addLocalVariable(new VariableDef("queens", new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("get queens");
            addOperand(new ArgumentRef("ChessAII", "check board2", "board"));
          }
        }));
      }
    };
    return res;
  }
  public static PredicateDef predicate_m0_0() {
    PredicateDef res = new PredicateDef("ChessAII", "check board3", new And() {
      {
        addOperand(new ForAll(new VariableRef("queens", "ChessAII"), new And() {
          {
            addOperand(new Not(new FunctionCall() {
              {
                setModelName("ChessDSL");
                setFunctionName("on one line");
                addOperand(new RangeRef("q1"));
                addOperand(new RangeRef("q2"));
              }
            }));
            addOperand(new Not(new FunctionCall() {
              {
                setModelName("ChessDSL");
                setFunctionName("on one diagonal");
                addOperand(new RangeRef("q1"));
                addOperand(new RangeRef("q2"));
              }
            }));

          }
        }) {
          {
            add(new Range("q1"));
            add(new Range("q2"));
          }
        });
      }
    }, new ArgumentDef("ChessAII", "check board3", "board") {
      {

      }
    }) {
      {
        addLocalVariable(new VariableDef("queens", new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("get queens");
            addOperand(new ArgumentRef("ChessAII", "check board3", "board"));
          }
        }));
      }
    };
    return res;
  }
  public static PredicateDef predicate_o0() {
    PredicateDef res = new PredicateDef("ChessAII", "check board", new And() {
      {
        addOperand(new ForAll(new VariableRef("queens", "ChessAII"), new Not(new ForAll(new VariableRef("queens", "ChessAII"), new Not(new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("on near line");
            addOperand(new RangeRef("q"));
            addOperand(new RangeRef("qq"));
          }
        })) {
          {
            add(new Range("qq"));
          }
        })) {
          {
            add(new Range("q"));
          }
        });
        addOperand(new ForAll(new VariableRef("queens", "ChessAII"), new And() {
          {
            addOperand(new Not(new FunctionCall() {
              {
                setModelName("ChessDSL");
                setFunctionName("on one line");
                addOperand(new RangeRef("q1"));
                addOperand(new RangeRef("q2"));
              }
            }));
            addOperand(new Not(new FunctionCall() {
              {
                setModelName("ChessDSL");
                setFunctionName("on one diagonal");
                addOperand(new RangeRef("q1"));
                addOperand(new RangeRef("q2"));
              }
            }));

          }
        }) {
          {
            add(new Range("q1"));
            add(new Range("q2"));
          }
        });
      }
    }, new ArgumentDef("ChessAII", "check board", "board") {
      {

      }
    }) {
      {
        addLocalVariable(new VariableDef("queens", new FunctionCall() {
          {
            setModelName("ChessDSL");
            setFunctionName("get queens");
            addOperand(new ArgumentRef("ChessAII", "check board", "board"));
          }
        }));
      }
    };
    return res;
  }

  public static void main(String[] args) {

    // Building SemanticModel 
    addVariables(model);
    addRules(model);
    addPredicates(model);
    System.out.println(model);

    // Runing start() predicate if it exists 
    LocalSemanticRegistry registry = new LocalSemanticRegistry();
    try {
      ModelDescriptor md = registry.register(model);
      LocalSemanticMachine machine = (LocalSemanticMachine) registry.getSemanticMachine(md);

      machine.loadBaseLibrary("org.d0sl.examples.chess.ChessDSL");

      PredicateDescriptor[] predicates = machine.getPredicatesList();
      PredicateDescriptor start = null;
      for (PredicateDescriptor pdesc : predicates) {
        System.out.println(pdesc);
        if (pdesc.getPredicateName().equals("start")) {
          start = pdesc;
        }
      }
      if (start != null) {
        System.out.println(machine.callPredicate("start"));
      }
    } catch (SemanticException ex) {
      ex.printStackTrace();
    }


  }

}
